#!/usr/bin/env bash

# DESCRIPTION:
#   Clone and pushes git repositories to a repository group.
# USAGE:
#   Create and fill "source_repository_list.txt" with the repositories url list (http or ssh format) and then run:
#   repos_mirror <dest-group-url>

set -euo pipefail
if [[ ${TRACE-0} == "1" ]]; then set -o xtrace; fi

dest_group_url="$1"

if [[ ! -r source_repository_list.txt ]]; then
    echo "You need to create the source_repository_list.txt file first!" >&2
    exit 1
fi

# Remove if directory exists
clean_directory() {
    if [ -d "$1" ]; then
        rm -rf "$1"
    fi
}

mirror_repo() {
    local source_repo_url repo_name repo_path

    source_repo_url=$1
    # Get project name only
    repo_name=$(basename "$source_repo_url")
    repo_path="${repo_name}.git"

    clean_directory "$repo_path"

    echo -e "\n[INFO] Cloning $repo_name from source repository..."
    # Allow script to continue if missing repo
    git clone --quiet --mirror "$source_repo_url" || return 0

    # Remove uneeded and platform specific git objects
    # Allow failure since those objects can be absent
    git -C "$repo_path" show-ref |
        cut --delimiter=' ' --fields=2 |
        grep -e 'pull' -e 'merge-requests' -e 'environments' |
        xargs --no-run-if-empty --max-lines=1 git update-ref -d ||
        true

    git -C "$repo_path" remote set-url origin "$dest_group_url/$repo_name"

    echo "[INFO] Sending $repo_name to destiny repository..."
    git -C "$repo_path" push --set-upstream origin >/dev/null

    clean_directory "$repo_path"
}

main() {
    local line

    # Loop through source_repository_list.txt lines
    while IFS= read -r line; do
        # Remove ".git" if present at line end
        # trunk-ignore(shellcheck/SC2001)
        line=$(echo "$line" | sed 's/.git$//')

        # Clone repo and its wiki
        mirror_repo "${line}"
        mirror_repo "${line}.wiki"
    done <source_repository_list.txt
}

main

exit 0
