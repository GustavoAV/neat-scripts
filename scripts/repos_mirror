#!/usr/bin/env bash

# DESCRIPTION:
#   Clone and pushes git repositories to a repository group.
# USAGE:
#   Create and fill a file with the source repositories url list (http or ssh format) and then run:
#   repos_mirror <repo_list_file> <dest_group_url>

set -euo pipefail
if [[ ${TRACE-0} == "1" ]]; then set -o xtrace; fi

REPO_LIST_FILE="$1"
DEST_GROUP_URL="$2"

clean_directory() {
    if [[ -d $1 ]]; then
        rm -rf "$1"
    fi
}

mirror_repo() {
    local source_repo_url
    local repo_name
    local repo_path

    source_repo_url="$1"

    # Get project name only
    repo_name=$(basename "${source_repo_url}")
    repo_path="${repo_name}.git"

    echo -e "\n[INFO] Cloning ${repo_name} from source repository..."

    # Allow script to continue if missing repo
    if ! git clone --mirror "${source_repo_url}" >/dev/null 2>&1; then
        echo "[WARN] Missing or inacessible repository!"
        clean_directory "${repo_path}"
        return 0
    fi

    # Remove uneeded and platform specific git objects
    # Allow failure since those objects can be absent
    git -C "${repo_path}" show-ref |
        cut --delimiter=' ' --fields=2 |
        grep -e 'pull' -e 'merge-requests' -e 'environments' |
        xargs --no-run-if-empty --max-lines=1 git update-ref -d ||
        true

    git -C "${repo_path}" remote set-url origin "${DEST_GROUP_URL}/${repo_name}"

    echo "[INFO] Sending ${repo_name} to destiny repository..."
    git -C "${repo_path}" push --set-upstream origin >/dev/null

    clean_directory "${repo_path}"
}

main() {
    local repo_url

    if [[ ! -r ${REPO_LIST_FILE} ]]; then
        echo "[ERROR] Repositories list file missing or unreadable!" >&2
        exit 1
    fi

    # Loop through REPO_LIST_FILE lines
    while IFS= read -r repo_url; do
        # Remove ".git" if present at repo_url end
        # trunk-ignore(shellcheck/SC2001)
        repo_url=$(echo "${repo_url}" | sed 's/.git$//')

        # Clone repo and its wiki
        mirror_repo "${repo_url}"
        mirror_repo "${repo_url}.wiki"
    done <"${REPO_LIST_FILE}"
}

main

exit 0
